#!/bin/bash

# -----------------
#
# An utility to set env vars contexts.
#
# -----------------


# Version function
function version() {

  echo v1.0.0

}

# Help function

function help() {
cat <<EOF
ENVVARS contexts environments. 

To initialise an mlkcontext set up in the current folder:

  mlkcontext init

To create a context:

  mlkcontext new [context name]

To set an environment:

  . mlkcontext [context name]

If successfull, the set context will be stored 
at ENVVAR MLKCONTEXT_SET.

Precedence for ENVVARS setting is: system, common, common.secret, 
context, context.secret. 

Calling the script without parameters returns the currently set 
environment or [null] if no context is set.

To create template files, sufix them with .mlkcontext_template 
and use replacement string {{{ENVVARNAME}}}.

System-wide ENVVARS are stored at: 

  ~/.mlkcontext/system

Other options:

Usage:
  -l          returns available contexts
  -m PREFIX   list ENVVARS starting with PREFIX
  -n          list ENVVARS with the default prefix MLKC_
  -v          version
  -h          this help
EOF
}





# Creates a new context

function new() {

  # Store current path

  CURRENT_PATH=$(pwd)

  searchContexts

  # Check context does no exist

  if [ -f $NEW_CONTEXT ] ; then

    echo Context $NEW_CONTEXT already exists

  else

    cat > $NEW_CONTEXT <<'endmsg'
#!/bin/bash

# ---------------------------
#
# Describe purpose of context here.
#
# ---------------------------
#
# Prefix variables with MLKC_.
#
# ---------------------------

export MLKC_TEST=test
endmsg

    cat > "${NEW_CONTEXT}.secret" <<'endmsg'
#!/bin/bash

# ---------------------------
#
# Describe purpose of context here.
#
# ---------------------------
#
# Secret settings for context.
# Prefix variables with MLKC_.
#
# ---------------------------

export MLKC_TEST=test
endmsg

    echo Created new context $NEW_CONTEXT

  fi

}





# Init a mlkcontext

function init() {

  # Create context folder

  if [ ! -d mlkcontext ] ; then

    mkdir -p mlkcontext

    cat > mlkcontext/common <<'endmsg'
#!/bin/bash

# ---------------------------
#
# Common settings for all contexts.
#
# ---------------------------
#
# Prefix variables with MLKC_.
#
# ---------------------------

export MLKC_COMMON_TEST=test_common
endmsg

    cat > mlkcontext/common.secret <<'endmsg'
#!/bin/bash

# ---------------------------
#
# Common secret settings for all contexts.
#
# ---------------------------
#
# Prefix variables with MLKC_.
#
# ---------------------------

export MLKC_COMMON_TEST=test_common
endmsg


  # Check if there is no global config file, create it

    if [ ! -d ~/.mlkcontext ] ; then

      mkdir -p ~/.mlkcontext/

      cat > ~/.mlkcontext/system <<'endmsg'
#!/bin/bash

# ---------------------------
#
# User system-level envvars to be applied to all contexts.
#
# ---------------------------
#
# Prefix variables with MLKC_.
#
# ---------------------------

export MLKC_SYSTEM=test_system
endmsg

    fi

    echo *.secret >> mlkcontext/.gitignore

    echo Initialized mlkcontext

  else

    echo mlkcontext already initialized in current folder

  fi

}





# Function for processing templates

function processTemplates(){

  cd ..

  touch .gitignore

  # For storing the substitutions to perform on the templates

  SUBSTITUTIONS=""

  # Create sed compatible substitutions for all env vars that starts
  # with the MLKC_ prefix

  for V in "${!MLKC_@}" ; do

    SUBSTITUTIONS="${SUBSTITUTIONS} s|{{{${V}}}}|${!V}|g; "

  done

  # The string to include at the end of the .gitignore

  FOR_GITIGNORE="# Added by mlkcontext\n# -------------------"

  # Run SED substitutions on all template files in the folder tree
  # Creates a new file without the template suffix and updates the 
  # string to be added at the end of the .gitignore

  for T in $(find . -iname *.mlkcontext_template) ; do

    echo Processing template $T...

    NEW_FILE_NAME="${T%.*}"

    sed -e "${SUBSTITUTIONS}" $T > $NEW_FILE_NAME

    FOR_GITIGNORE="${FOR_GITIGNORE}\n${NEW_FILE_NAME#*/}"

  done

  echo Updating .gitignore...

  # Deletes all lines at .gitignore from the # Added by tmuxenv.sh
  # line to the end

  sed -n '/# Added by mlkcontext/q;p' .gitignore > .gitignore-new

  # Process the new .gitignore

  rm .gitignore

  mv .gitignore-new .gitignore

  printf "${FOR_GITIGNORE}" >> .gitignore

  echo Done

  return 0

}





# List set of MLKC_ set variables or any other prefixed env var

function listVars() {

  env | grep $ENVVARPREFIX | sort

}



# List available contexts

function availableContexts() {

  echo Available contexts at $(pwd): $(ls -I "*.secret")

  return

}





# Looks for the mlkcontext folder in the path

function searchContexts() {

  IFS="/" read -ra FOLDERS <<< "$(pwd)"

  for FOLDER in "${FOLDERS[@]}" ; do

    # Check mlkcontext folder exists

    if [ -d mlkcontext ]; then

      cd mlkcontext

      break

    fi

    cd ..

  done

  unset IFS

}






# Outputs a message reporting no context has been set

function noContextReport() {

  if [ "$(pwd)" == "/" ] ; then

    echo No contexts definition found in path

  else

    echo No context defined

    availableContexts

  fi

}









# Process function

process() {

  # Check selected context exists

  if [ ! -f "${MLKCONTEXT}" ] ; then

    export MLKCONTEXT_SET=

    echo Context $MLKCONTEXT not defined at $(pwd)

    availableContexts

  fi


  # Load app-wide settings

  if [ -f ~/.mlkcontext/system ] ; then

    source ~/.mlkcontext/system

  fi


  # Load common

  if [ -f "common" ] ; then

    source ./common

  fi


  # Load common.secret

  if [ -f "common.secret" ] ; then

    source ./common.secret

  fi


  # Load selected context

  if [ -f "${MLKCONTEXT}" ] ; then

    source ./$MLKCONTEXT

  fi


  # Load secrets

  if [ -f "${MLKCONTEXT}.secret" ] ; then

    source "./${MLKCONTEXT}.secret"

  fi


  echo Context $MLKCONTEXT set

  export MLKCONTEXT_SET=$MLKCONTEXT

}



# ----------------
#
# Main
#
# ----------------

# Store current path

CURRENT_PATH=$(pwd)


# Arguments

while getopts ":hlnm:v" opt
do
	case "$opt" in
    l)  searchContexts

        if [ "$(pwd)" == "/" ] ; then

          echo No contexts definition found in path

        else

          availableContexts

        fi
        exit 0
        ;;
    m)  ENVVARPREFIX=$OPTARG
        listVars
        exit 0
        ;;
    n)  ENVVARPREFIX=MLKC_
        listVars
        exit 0
        ;;
    h)  help
        exit 0
        ;;
    v)  version
        exit 0
        ;;
    \?) help
        exit 0
        ;;
	esac
done



# Check if command is init

if [ "${1}" == "init" ] ; then

  init

# Check if command is new

elif [ "${1}" == "new" ] ; then

  if [ -z $2 ] ; then

    echo Please specify name for the new context

  else

    NEW_CONTEXT=$2

    searchContexts

    if [ "$(pwd)" == "/" ] ; then

      echo No contexts definition found in path

    else

      new

    fi

  fi



# Process context

elif [ ! -z $1 ] ; then

  MLKCONTEXT=$1

  searchContexts

  # Exit if final path is /

  if [ "$(pwd)" = "/" ] ; then

    echo No contexts found in path

  elif [ ! -f $1 ] ; then

    # Exit if the context does not exists

    echo Context $1 does not exists

    cd $CURRENT_PATH

  else

    process

    processTemplates

  fi



# Check if no argument, return selected context

else 

  # Search the context

  searchContexts

  if [ -z $MLKCONTEXT_SET ] ; then

    #noContextReport

    echo [null]

  else

    echo $MLKCONTEXT_SET

  fi
          
fi


# Restore

cd $CURRENT_PATH

